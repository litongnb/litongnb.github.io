<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js003</title>
      <link href="/2022/11/09/js003/"/>
      <url>/2022/11/09/js003/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript基础"><a href="#javascript基础" class="headerlink" title="javascript基础"></a>javascript基础</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的基本概念"><a href="#栈的基本概念" class="headerlink" title="栈的基本概念"></a>栈的基本概念</h3><p><strong>栈的定义</strong></p><p>栈(Stack)：是只允许在一端进入插入或删除的线性表。<br>                首先栈是一种线性表，但这种线性表只能在某一端进行插入和删除操作。</p><p><strong>入栈(push)：</strong></p><img src="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/栈和队列/image-20221109190612786.png" alt="image-20221109190612786" style="zoom: 67%;"><p><strong>出栈(pop)：</strong></p><img src="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/栈和队列/image-20221109190638750.png" alt="image-20221109190638750" style="zoom:67%;"><p><strong>栈顶</strong>(Top)：线性表允许进入插入删除的那一端。<br><strong>栈底</strong>(Bottom)：固定的、不允许进入插入和删除的另一端。<br><strong>空栈</strong>：不含任何元素的空表。</p><p><strong>栈又称为后进先出（Last In First Out）的线性表，简称LIFO结构</strong></p><p>Java标准库中的提供的栈</p><img src="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/栈和队列/image-20221115151749078.png" alt="image-20221115151749078" style="zoom:80%;"><p>vector:动态的顺序表，和ArrayLIst类似 </p><h3 id="实现栈的方法"><a href="#实现栈的方法" class="headerlink" title="实现栈的方法"></a>实现栈的方法</h3><p><img src="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image-20221109191132199.png" alt="image-20221109191132199"></p><table><thead><tr><th align="center">Stack()</th><th align="center">构造一个空的栈</th></tr></thead><tbody><tr><td align="center">E push(E e)</td><td align="center">将e入栈，并返回e</td></tr><tr><td align="center">E pop()</td><td align="center">将栈顶元素出栈并返回</td></tr><tr><td align="center">E peek()</td><td align="center">获取栈顶元素</td></tr><tr><td align="center">int size()</td><td align="center">获取栈中有效元素个数</td></tr><tr><td align="center">boolean empty()</td><td align="center">检测栈是否为空</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入栈</span></span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;栈中有效元素个数 : &quot;</span>+ stack.size()); <span class="comment">// 输出 4</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取栈顶元素 : &quot;</span>+stack.peek()); <span class="comment">// 获取栈顶元素,但是不出栈,栈中元素不变  4</span></span><br><span class="line"></span><br><span class="line">        stack.pop();   <span class="comment">// 出栈  元素 4 出栈 ,栈中剩余元素 3,2,1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取栈顶元素 : &quot;</span> + stack.pop()); <span class="comment">// 获取栈顶元素,出栈, 此时栈中剩余 2,1两个元素</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;栈中有效元素个数 : &quot;</span>+ stack.size()); <span class="comment">// 输出 2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;stack是否为空 : &quot;</span>+ stack.isEmpty()); <span class="comment">// 判断栈中是否为空</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模拟实现一个栈"><a href="#模拟实现一个栈" class="headerlink" title="模拟实现一个栈"></a>模拟实现一个栈</h3><p>栈是一个特殊的顺序表，所以采用链表和数组的方式都可以实现，一般采用数组的方式</p><h4 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size 记录栈中元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用无参构造方法 默认最大容量12</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">(<span class="type">int</span> MaxSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">int</span>[MaxSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入栈-push"><a href="#入栈-push" class="headerlink" title="入栈(push)"></a>入栈(push)</h4><p>入栈时判断栈是否已满，如果满了，给数组扩容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.size == arr.length)&#123;</span><br><span class="line">            <span class="comment">// 栈满 ,需要扩容</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[] copyArr;</span><br><span class="line">            <span class="comment">// 复制arr 数组并扩容一倍</span></span><br><span class="line">            copyArr = Arrays.copyOf(arr,<span class="number">2</span> * arr.length);</span><br><span class="line">            arr = copyArr;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将元素添加到size位置</span></span><br><span class="line">        <span class="built_in">this</span>.arr[size] = value;</span><br><span class="line">        <span class="comment">// 元素个数加一</span></span><br><span class="line">        <span class="built_in">this</span>.size++;</span><br><span class="line">        <span class="comment">// 返回添加元素</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="出栈-pop"><a href="#出栈-pop" class="headerlink" title="出栈(pop)"></a>出栈(pop)</h4><p>出栈时，判断栈中元素是否为空，如果为空，抛出异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有元素</span></span><br><span class="line">            <span class="comment">//抛出运行时异常,此处也可以自定义异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈中没有元素,不能出栈....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获得栈顶元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.arr[size - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// size - 1 之后, 下一次插入时会覆盖原数据,利用覆盖替代删除</span></span><br><span class="line">        <span class="built_in">this</span>.size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取栈顶元素-peek"><a href="#获取栈顶元素-peek" class="headerlink" title="获取栈顶元素(peek)"></a>获取栈顶元素(peek)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line">    public int <span class="title function_">peek</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有元素</span></span><br><span class="line">            <span class="comment">//抛出运行时异常,此处也可以自定义异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈中没有元素,不能出栈....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="获取元素个数-get-size"><a href="#获取元素个数-get-size" class="headerlink" title="获取元素个数(get size)"></a>获取元素个数(get size)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="判断栈是否为空-isEmpty"><a href="#判断栈是否为空-isEmpty" class="headerlink" title="判断栈是否为空(isEmpty)"></a>判断栈是否为空(isEmpty)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断元素是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size 记录栈中元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用无参构造方法 默认最大容量12</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">(<span class="type">int</span> MaxSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">int</span>[MaxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.size == arr.length)&#123;</span><br><span class="line">            <span class="comment">// 栈满 ,需要扩容</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[] copyArr;</span><br><span class="line">            <span class="comment">// 复制arr 数组并扩容一倍</span></span><br><span class="line">            copyArr = Arrays.copyOf(arr,<span class="number">2</span> * arr.length);</span><br><span class="line">            arr = copyArr;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将元素添加到size位置</span></span><br><span class="line">        <span class="built_in">this</span>.arr[size] = value;</span><br><span class="line">        <span class="comment">// 元素个数加一</span></span><br><span class="line">        <span class="built_in">this</span>.size++;</span><br><span class="line">        <span class="comment">// 返回添加元素</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="comment">//没有元素</span></span><br><span class="line">            <span class="comment">//抛出运行时异常,此处也可以自定义异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈中没有元素,不能出栈....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获得栈顶元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.arr[size - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// size - 1 之后, 下一次插入时会覆盖原数据,利用覆盖替代删除</span></span><br><span class="line">        <span class="built_in">this</span>.size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="comment">//没有元素</span></span><br><span class="line">            <span class="comment">//抛出运行时异常,此处也可以自定义异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈中没有元素,不能出栈....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.arr[<span class="built_in">this</span>.size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断元素是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>队列：只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出FIFO(First In First Out)                </p><p>入队列：进行插入操作的一端称为队尾(Tail&#x2F;Rear)<br>出队列：进行删除操作的一端称为对头(Head&#x2F;Front)</p><img src="/2022/11/08/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/栈和队列/image-20221115151536222.png" alt="image-20221115151536222" style="zoom:80%;"><h4 id="队列的使用"><a href="#队列的使用" class="headerlink" title="队列的使用"></a>队列的使用</h4><ol><li>java标准库中的队列</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java005</title>
      <link href="/2022/11/03/java005/"/>
      <url>/2022/11/03/java005/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="方法概念"><a href="#方法概念" class="headerlink" title="方法概念"></a>方法概念</h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js002</title>
      <link href="/2022/11/01/js002/"/>
      <url>/2022/11/01/js002/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript基础"><a href="#javascript基础" class="headerlink" title="javascript基础"></a>javascript基础</h1><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑与  &amp;&amp;  and  两侧都是true  结果才是true  只要有一侧为false 结果就为false</p><p>逻辑或  ||  or  两侧有一个是true  结果就是true  两侧都为false 结果才是false</p><p>逻辑非  !  not</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">console.log(<span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line">console.log(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">console.log(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// true </span></span><br><span class="line">console.log(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &lt; <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line">console.log(!<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 用我们的布尔值参与的逻辑运算  true &amp;&amp; false  == false </span></span><br><span class="line"><span class="comment">// 2. 123 &amp;&amp; 456  是值 或者是 表达式 参与逻辑运算？ </span></span><br><span class="line"><span class="comment">// 3. 逻辑与短路运算  如果表达式1 结果为真 则返回表达式2  如果表达式1为假 那么返回表达式1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span>); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">456</span>); <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">1</span> + <span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">1</span> + <span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 如果有空的或者否定的为假 其余是真的  0  &#x27;&#x27;  null undefined  NaN</span></span><br><span class="line"><span class="comment">// 4. 逻辑或短路运算  如果表达式1 结果为真 则返回的是表达式1 如果表达式1 结果为假 则返回表达式2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span> || <span class="number">456</span> + <span class="number">123</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">456</span> || <span class="number">456</span> + <span class="number">123</span>); <span class="comment">// 456</span></span><br><span class="line"><span class="comment">// 逻辑中断很重要 它会影响我们程序运行结果思密达</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || num++);<span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || ++num);<span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>进入网吧案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//         弹出 prompt 输入框，用户输入年龄， 程序把这个值取过来保存到变量中</span></span><br><span class="line">        <span class="comment">// 使用 if 语句来判断年龄，如果年龄大于18 就执行 if 大括号里面的输出语句</span></span><br><span class="line">        <span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;我想带你去网吧偷耳机&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="if-else双分支语句"><a href="#if-else双分支语句" class="headerlink" title="if else双分支语句"></a>if else双分支语句</h3><p>判断闰年案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//         算法：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</span></span><br><span class="line"><span class="comment">// 弹出prompt 输入框，让用户输入年份，把这个值取过来保存到变量中</span></span><br><span class="line"><span class="comment">// 使用 if 语句来判断是否是闰年，如果是闰年，就执行 if 大括号里面的输出语句，否则就执行 else里面的输出语句</span></span><br><span class="line"><span class="comment">// 一定要注意里面的且 &amp;&amp;  还有或者 || 的写法，同时注意判断整除的方法是取余为 0</span></span><br><span class="line">        <span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入年份：&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="if-else-if多分支语句"><a href="#if-else-if多分支语句" class="headerlink" title="if else if多分支语句"></a>if else if多分支语句</h3><p>判断成绩案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  伪代码       按照从大到小判断的思路</span></span><br><span class="line"><span class="comment">// 弹出prompt输入框，让用户输入分数（score），把这个值取过来保存到变量中</span></span><br><span class="line"><span class="comment">// 使用多分支 if else if 语句来分别判断输出不同的值</span></span><br><span class="line">        <span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入分数:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你是我的骄傲&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你已经很出色了&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;你要继续加油喽&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;孩子，你很危险&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;熊孩子，我不想和你说话，我只想用鞭子和你说话&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h3><p>查询水果案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//         弹出 prompt 输入框，让用户输入水果名称，把这个值取过来保存到变量中。</span></span><br><span class="line"><span class="comment">// 将这个变量作为 switch 括号里面的表达式。</span></span><br><span class="line"><span class="comment">// case 后面的值写几个不同的水果名称，注意一定要加引号 ，因为必须是全等匹配。</span></span><br><span class="line"><span class="comment">// 弹出不同价格即可。同样注意每个 case 之后加上 break ，以便退出 switch 语句。</span></span><br><span class="line"><span class="comment">// 将 default 设置为没有此水果。</span></span><br><span class="line">        <span class="keyword">var</span> fruit = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入查询的水果:&#x27;</span>);</span><br><span class="line">        <span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;苹果的价格是 3.5/斤&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;榴莲的价格是 35/斤&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;没有此水果&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><ol><li>求1-100之间所有数的平均值  需要一个 sum 和的变量 还需要一个平均值 average 变量</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">          sum = sum + i;</span><br><span class="line">      &#125;</span><br><span class="line">      average = sum / <span class="number">100</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(average);</span><br></pre></td></tr></table></figure><ol start="2"><li>求1-100之间所有偶数和奇数的和  我们需要一个偶数的和变量 even  还需要一个奇数 odd</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                even = even + i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                odd = odd + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100 之间所有的偶数和是&#x27;</span> + even);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100 之间所有的奇数和是&#x27;</span> + odd);  </span><br></pre></td></tr></table></figure><ol start="3"><li>求1-100之间所有能被3整除的数字的和</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// result = result + i;</span></span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100之间能够被3整数的数字的和是：&#x27;</span> + result);</span><br></pre></td></tr></table></figure><h4 id="求学生成绩案例："><a href="#求学生成绩案例：" class="headerlink" title="求学生成绩案例："></a>求学生成绩案例：</h4><ol><li>弹出输入框输入总的班级人数(num)</li><li>依次输入学生的成绩（ 保存起来 score）， 此时我们需要用到</li><li>for 循环， 弹出的次数跟班级总人数有关系 条件表达式 i &lt;&#x3D; num</li><li>进行业务处理: 计算成绩。 先求总成绩（ sum）， 之后求平均成绩（ average）</li><li>弹出结果</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入班级的总人数:&#x27;</span>); <span class="comment">// num 总的班级人数</span></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 求和的变量</span></span><br><span class="line">        <span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 求平均值的变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>);</span><br><span class="line">            <span class="comment">// 因为从prompt取过来的数据是 字符串型的需要转换为数字型</span></span><br><span class="line">            sum = sum + <span class="built_in">parseFloat</span>(score);</span><br><span class="line">        &#125;</span><br><span class="line">        average = sum / num;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;班级总的成绩是&#x27;</span> + sum);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;班级平均分是：&#x27;</span> + average);</span><br></pre></td></tr></table></figure><h4 id="一行打印五个⭐"><a href="#一行打印五个⭐" class="headerlink" title="一行打印五个⭐"></a>一行打印五个⭐</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接输出五个⭐</span></span><br><span class="line"><span class="comment">// console.log(&#x27;⭐⭐⭐⭐⭐&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for循环输出五个⭐</span></span><br><span class="line"><span class="comment">// for (var i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;⭐&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立一个空的字符串，在里面用for循环添加五个⭐</span></span><br><span class="line"><span class="comment">// var str = &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">// for (var i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//     str = str + &#x27;⭐&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(str);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义⭐的个数，建立空字符串在其中添加</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;⭐&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h3 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 双重for循环 语法结构</span></span><br><span class="line"><span class="comment">// for (外层的初始化变量; 外层的条件表达式; 外层的操作表达式) &#123;</span></span><br><span class="line"><span class="comment">//     for (里层的初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span></span><br><span class="line"><span class="comment">//         // 执行语句;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 我们可以把里面的循环看做是外层循环的语句</span></span><br><span class="line"><span class="comment">// 3. 外层循环循环一次， 里面的循环执行全部</span></span><br><span class="line"><span class="comment">// 4. 代码验证</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是里层的循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>for循环嵌套for循环，按照语法顺序一次运行</p><h4 id="打印五行⭐"><a href="#打印五行⭐" class="headerlink" title="打印五行⭐"></a>打印五行⭐</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印五行五列星星⭐</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">// 外层循环负责打印五行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123; <span class="comment">// 里层循环负责一行打印五个星星</span></span><br><span class="line">                str = str + <span class="string">&#x27;⭐&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果一行打印完毕5个星星就要另起一行 加 \n</span></span><br><span class="line">            str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h4 id="打印n行n列⭐"><a href="#打印n行n列⭐" class="headerlink" title="打印n行n列⭐"></a>打印n行n列⭐</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = <span class="title function_">prompt</span>(<span class="string">&quot;请输入打印的行数&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cols = <span class="title function_">prompt</span>(<span class="string">&quot;请输入打印的列数&quot;</span>)；</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(int a = <span class="number">0</span>;a &lt; rows;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int b = <span class="number">0</span>;b &lt; cols;b++)&#123;</span><br><span class="line">            str = str + <span class="string">&#x27;⭐&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h4 id="打印倒三角形"><a href="#打印倒三角形" class="headerlink" title="打印倒三角形"></a>打印倒三角形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123; <span class="comment">// 外层循环控制行数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123; <span class="comment">// 里层循环打印的个数不一样  j = i</span></span><br><span class="line">                str = str + <span class="string">&#x27;⭐&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(int a = <span class="number">1</span>;a &lt;= <span class="number">10</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int b = <span class="number">1</span>;b &lt;= a;b++)&#123;</span><br><span class="line">        str += a + <span class="string">&#x27;*&#x27;</span> + b + <span class="string">&quot;=&quot;</span> + a*b + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><h4 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h4><h5 id="打印人的一生"><a href="#打印人的一生" class="headerlink" title="打印人的一生"></a>打印人的一生</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这个人今年&quot;</span>+i+<span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计算1-100之间整数和"><a href="#计算1-100之间整数和" class="headerlink" title="计算1~100之间整数和"></a>计算1~100之间整数和</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java004</title>
      <link href="/2022/10/29/java004/"/>
      <url>/2022/10/29/java004/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组概念："><a href="#数组概念：" class="headerlink" title="数组概念："></a>数组概念：</h4><p>数组是一种容器，可以用来春促同种数据类型的多个值<br>存储数据时需要结合隐式转换考虑</p><p>如果定义int数组，double,boolen这些类型的数组时不可以存入的，<br>但是，byte,shrot,char这些类型因为会自动转换可以存入</p><p>建议：容器的类，和存储的数据类型保持一致。</p><h4 id="数组定义："><a href="#数组定义：" class="headerlink" title="数组定义："></a>数组定义：</h4><h5 id="格式一："><a href="#格式一：" class="headerlink" title="格式一："></a>格式一：</h5><p>数据类型 [] 数组名</p><p>比如：int [] arr   数据类型：int    数组名：arr</p><h5 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h5><p>数据类型 数组名 []</p><p>比如： int arr []   </p><hr><h4 id="数组静态初始化"><a href="#数组静态初始化" class="headerlink" title="数组静态初始化"></a>数组静态初始化</h4><h5 id="完整格式："><a href="#完整格式：" class="headerlink" title="完整格式："></a>完整格式：</h5><p>数据类型 [] 数组名 &#x3D; new 数据类型[]{元素1，元素2，元素3…};</p><p>比如：<br>    int [] arr &#x3D; new int[]{1 , 2 , 3};</p><p>​    double [] arr &#x3D; new double[]{1.1 , 2.2 , 3.3};</p><h5 id="格式详解："><a href="#格式详解：" class="headerlink" title="格式详解："></a>格式详解：</h5><p>数据类型： 限定数组以后可以存放什么类型数据</p><p>方括号： 表示现在定义的是一个数组</p><p>数组名： 给数组命名</p><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>等号前后数据类型一致，创建完成数组后，长度不得发生改变</p><h5 id="简化格式："><a href="#简化格式：" class="headerlink" title="简化格式："></a>简化格式：</h5><p>数据类型 [] 数组名 &#x3D; {元素1，元素2，元素3…};</p><h6 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h6><p>定义存储3个学生的姓名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String [] nameArr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">String [] nameArr = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h6 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h6><p>定义存储5个学生的年龄</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="type">int</span> [] agesArr = &#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;</span><br></pre></td></tr></table></figure><h6 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h6><p>定义存储4个学生的身高</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> [] heightArr = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1.77</span>,<span class="number">1.78</span><span class="number">.1</span><span class="number">.79</span>,<span class="number">1.83</span>&#125;;</span><br><span class="line"><span class="type">double</span> [] heightArr = &#123;<span class="number">1.77</span>,<span class="number">1.78</span>,<span class="number">1.79</span>,<span class="number">1.83</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="地址值"><a href="#地址值" class="headerlink" title="地址值"></a>地址值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@6d03e736</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@568db2f2</span></span><br></pre></td></tr></table></figure><p>数组的地址值：表示数组在内存中的位置</p><p>[ ：表示现在打印的是一个数组。<br>I：表示现在打印的数组是int类型的。<br>@：仅仅是一个间隔符号而已。<br>6d03e736：就是数组在内存中真正的地址值。（十六进制的）<br>但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。</p><h4 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h4><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p>数组名 [索引]</p><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>获取数组中对应索引上的值<br>修改数组中对应索引上的值<br>一旦修改之后，原索引上的值就会被覆盖</p><h5 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组中元素访问的格式：</span></span><br><span class="line"><span class="comment">                数组名[索引];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         作用：</span></span><br><span class="line"><span class="comment">            1.获取指定索引上对应的元素</span></span><br><span class="line"><span class="comment">            2.修改指定索引上对应的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       <span class="comment">//需求1：获取arr数组中，3索引上的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[<span class="number">3</span>];</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//需求2：将arr数组中，3索引上的值修改为10</span></span><br><span class="line">            arr[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改之后为:&quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>也叫角标、下标</p><p> 就是数组容器中每一个小格子对应的编号。</p><p>相当于一个标有序号的关键字链</p><h5 id="索引的特点"><a href="#索引的特点" class="headerlink" title="索引的特点"></a>索引的特点</h5><ol><li>索引一定是从0开始的</li><li>索引不间断</li><li>索引依次增加1</li></ol><hr><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环的过程中，i依次表示数组中的每一个索引</span></span><br><span class="line">    sout(arr[i]);<span class="comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h4><h5 id="格式：-1"><a href="#格式：-1" class="headerlink" title="格式："></a>格式：</h5><p>数据类型 [] 数组名 &#x3D; new 数据类型[数组的长度]</p><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义一个数组，存3个人的年龄，年龄未知</span></span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span></span><br><span class="line"><span class="type">int</span>[] scoresArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h5 id="数组的默认初始化："><a href="#数组的默认初始化：" class="headerlink" title="数组的默认初始化："></a>数组的默认初始化：</h5><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’</p><p>引用类型：null</p><h4 id="数组两种初始化方式的区别"><a href="#数组两种初始化方式的区别" class="headerlink" title="数组两种初始化方式的区别"></a>数组两种初始化方式的区别</h4><p>静态初始化：int [] arr &#x3D; {1,2,3,4,5};</p><p>动态初始化：int [] arr &#x3D; new int [3];</p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h5 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h5><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><h5 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h5><p>录入学生成绩，也已知学生成绩</p><p>就用int [] arr &#x3D; { };存放</p><p>如果只知道要录入多少，就动态初始化，给出一个数组的长度</p><p>如 int [] arr &#x3D; new int[5];</p><h4 id="数组常见问题"><a href="#数组常见问题" class="headerlink" title="数组常见问题"></a>数组常见问题</h4><p>当访问了数组中不存在的索引，就会引发索引越界异常</p><p><strong>避免：</strong>针对于任意一个数组，索引的范围，最小索引：0  最大索引：数组的长度 - 1   也就是 数组名.length - 1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//用索引来访问数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="数组练习"><a href="#数组练习" class="headerlink" title="数组练习"></a>数组练习</h4><h5 id="练习1：求和"><a href="#练习1：求和" class="headerlink" title="练习1：求和"></a>练习1：求和</h5><p>需求：定义一个数组，存储1,2,3,4,5</p><p>遍历数组得到每一个元素，求数组里面所有的数据和</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组，并添加数据1,2,3,4,5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个数据，累加求和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 依次表示数组里面的每一个元素</span></span><br><span class="line">    sum = sum + arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当循环结束之后，sum的值就是累加之后的结果</span></span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h5 id="练习2：统计个数"><a href="#练习2：统计个数" class="headerlink" title="练习2：统计个数"></a>练习2：统计个数</h5><p>需求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10</p><p>遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//定义一个变量，用来统计次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 表示数组里面的每一个元素</span></span><br><span class="line">    <span class="comment">//3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// System.out.println(arr[i]);</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可</span></span><br><span class="line">System.out.println(<span class="string">&quot;数组中能被3整除的数字有&quot;</span> + count + <span class="string">&quot;个&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="⭐练习3：变换数据"><a href="#⭐练习3：变换数据" class="headerlink" title="⭐练习3：变换数据"></a>⭐练习3：变换数据</h5><p>需求：</p><p>定义一个数组，存储1,2,3,4,5,6,7,8,9,10</p><p>遍历数组得到每一个元素。</p><p>要求：</p><p>1，如果是奇数，则将当前数字扩大两倍</p><p>2，如果是偶数，则将当前数字变成二分之一</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组，存1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 依次表示数组里面的每一个元素</span></span><br><span class="line">    <span class="comment">//3.对每一个元素进行判断</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//偶数 变成二分之一</span></span><br><span class="line">        arr[i] = arr[i] / <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//奇数 扩大两倍</span></span><br><span class="line">        arr[i] = arr[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="comment">//一个循环尽量只做一件事情。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习4：求最值"><a href="#练习4：求最值" class="headerlink" title="练习4：求最值"></a>练习4：求最值</h5><p>需求：求数组中的最大值</p><p>定义数组求最大值：33,5,22,44,55</p><p>扩展问题：<br>1.根据求最大值的思路，自己改写一下求最小智<br>2.为什么max要记录为arr[0],默认值不能为0吗？<br>&#x2F;&#x2F;不能写0<br>max的初始化值一定要是数组中的值。<br>3.循环中开始条件一定是0吗？<br>循环的开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低<br>&#x2F;&#x2F;为了提高效率，减少一次循环的次数，循环开始条件可以写1.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数组用来存储5个值</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">33</span>,<span class="number">5</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="comment">//2.定义一个变量max用来存储最大值</span></span><br><span class="line"><span class="comment">//临时认为0索引的数据是最大的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//3.循环获取数组中的每一个元素</span></span><br><span class="line"><span class="comment">//拿着每一个元素跟max进行比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 索引  arr[i] 元素</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.当循环结束之后，max记录的就是数组中的最大值</span></span><br><span class="line">System.out.println(max);<span class="comment">//55</span></span><br></pre></td></tr></table></figure><h5 id="练习5：统计个数"><a href="#练习5：统计个数" class="headerlink" title="练习5：统计个数"></a>练习5：统计个数</h5><p>需求：生成10个1~100之间的随机数存入数组。</p><p>1）求出所有数据的和</p><p>2）求所有数据的平均数</p><p>3）统计有多少个数据比平均值小</p><p>random  (100)+1    r.nextint(100)+1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数组</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//2.把随机数存入到数组当中</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//每循环一次，就会生成一个新的随机数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//把生成的随机数添加的数组当中</span></span><br><span class="line">    <span class="comment">//数组名[索引] = 数据;</span></span><br><span class="line">    arr[i] = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1）求出所有数据的和</span></span><br><span class="line"><span class="comment">//定义求和变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//循环得到每一个元素</span></span><br><span class="line">    <span class="comment">//并把元素累加到sum当中</span></span><br><span class="line">    sum = sum + arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中所有数据的和为：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2）求所有数据的平均数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中平均数为：&quot;</span> + avg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3）统计有多少个数据比平均值小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; avg)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当循环结束之后，就表示我已经找到了所有的比平均数小的数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;在数组中，一共有&quot;</span> + count + <span class="string">&quot;个数据，比平均数小&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，验证答案</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习6："><a href="#练习6：" class="headerlink" title="练习6："></a>练习6：</h5><p>需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。</p><p>交换前：1,2,3,4,5</p><p>交换后：5,2,3,4,1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储数据</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.利用循环去交换数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = arr.length - <span class="number">1</span>; i &lt; j; i++,j--)&#123;</span><br><span class="line">    <span class="comment">//交换变量i和变量j指向的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中的数据就实现了头尾交换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="⭐练习7：打乱数据"><a href="#⭐练习7：打乱数据" class="headerlink" title="⭐练习7：打乱数据"></a>⭐练习7：打乱数据</h5><p>需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储1~5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.循环遍历数组，从0索引开始打乱数据的顺序</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//⭐生成一个随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">//拿着随机索引指向的元素 跟 i 指向的元素进行交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中所有的数据已经打乱顺序了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Brute-Force算法</title>
      <link href="/2022/10/26/Brute-Force%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/26/Brute-Force%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Brute-Force算法"><a href="#Brute-Force算法" class="headerlink" title="Brute-Force算法"></a>Brute-Force算法</h1><h3 id="Brute-Force算法原理："><a href="#Brute-Force算法原理：" class="headerlink" title="Brute-Force算法原理："></a>Brute-Force算法原理：</h3><p><strong>Brute-Force匹配算法</strong>，翻译过来可以叫<strong>暴力匹配算法</strong>，典型应用场景就是字符串的匹配问题，比如寻找一个子串在主串中第一次出现的下标。这种匹配算法的逻辑是这样的：选取主串中指定位置作为匹配的起点(这篇文章使用的是首位作为起点)，将子串起点与该起点对比，比对成功后起点后移一位，子串的起点同样后移一位继续比较，直到将子串与主串中全部匹配；若是中途出现比对失败的情况，则将主串从原起点的下一位开始继续这种比较。</p><p>概括来说，<strong>主串先选中起点，子串起点开始与之对比，比对成功则字串后移，而此时主串将从起点的后一位开始比对，以此内推直到完成匹配</strong></p><hr><h3 id="while循环实现BF"><a href="#while循环实现BF" class="headerlink" title="while循环实现BF"></a>while循环实现BF</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Brute-Force匹配算法，该算法性能比较低----使用while实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexFirst</span><span class="params">(String strMain,String strSub)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strMain.isEmpty() || strSub.isEmpty() || strSub.length()&gt;strMain.length() )&#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] mainChars = strMain.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] subChars = strSub.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;mainChars.length &amp;&amp; j&lt;subChars.length)&#123;</span><br><span class="line">            <span class="comment">//匹配成功，继续匹配下一位</span></span><br><span class="line">            <span class="keyword">if</span>(mainChars[i]==subChars[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==subChars.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(i-j);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//匹配不成功,从下一位从新开始匹配</span></span><br><span class="line">                i=i-j+<span class="number">1</span>;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="for循环实现BF"><a href="#for循环实现BF" class="headerlink" title="for循环实现BF"></a>for循环实现BF</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexFirstFor</span><span class="params">(String strMain,String strSub)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strMain.isEmpty() || strSub.isEmpty() || strSub.length()&gt;strMain.length() )&#123;</span><br><span class="line">           System.out.println(-<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">char</span>[] mainChars = strMain.toCharArray();</span><br><span class="line">       <span class="type">char</span>[] subChars = strSub.toCharArray();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mainChars.length-subChars.length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;subChars.length;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(mainChars[i]==subChars[j])&#123;</span><br><span class="line">                   <span class="keyword">if</span>(j==subChars.length-<span class="number">1</span>)&#123;</span><br><span class="line">                       System.out.println(i-j);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   i++;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(-<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法</title>
      <link href="/2022/10/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>递归算法是一种直接或间接调用自身函数或者方法的算法<br>也就是 程序自身的调用</p><h3 id="算法实质"><a href="#算法实质" class="headerlink" title="算法实质"></a>算法实质</h3><p>递归算法就是将原问题不断分解为规模缩小的子问题，然后递归调用方法来表示问题的解</p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>递和归  递去 和 归来</p><p><strong>递去</strong>：将递归问题分为若干个规模较小，与原问题形式相同的子问题，这些子问题可以用相同的方法去解</p><p><strong>归来</strong>：问题不断缩小规模递去，必须有一个明确的结束递去的临界点（递归的出口），一旦到达该点就从该点原路返回到原点，解决问题</p><h4 id="图解分析"><a href="#图解分析" class="headerlink" title="图解分析"></a>图解分析</h4><img src="/2022/10/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/递归算法/image-20221108141221675.png" alt="image-20221108141221675" style="zoom: 67%;"><h3 id="递归算法设计要素"><a href="#递归算法设计要素" class="headerlink" title="递归算法设计要素"></a>递归算法设计要素</h3><p>递归算法时一种从下向上的思维方式，递归算法的难点在于它的逻辑性</p><p><strong>注意：</strong></p><ul><li>明确递归的终止条件</li><li>提取重复的逻辑，缩小问题的规模不断递去</li><li>给出递归终止时的处理办法</li></ul><h3 id="递归算法的经典实例"><a href="#递归算法的经典实例" class="headerlink" title="递归算法的经典实例"></a>递归算法的经典实例</h3><p><strong>问题定义即为递归定义</strong></p><ul><li>阶乘</li><li>斐波那契数列</li><li>杨辉三角的取值</li></ul><p><strong>问题应用递归算法来解决</strong></p><ul><li>Hanoi塔问题⭐</li></ul><p><strong>部分数据结构也是用递归来定义的</strong></p><ul><li>树</li></ul><h4 id="问题递归定义"><a href="#问题递归定义" class="headerlink" title="问题递归定义"></a>问题递归定义</h4><h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)<span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n*f(n-<span class="number">1</span>);<span class="comment">//缩小问题规模，依次递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">Fac</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> n;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        n--;</span><br><span class="line">        result = result * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阶乘递归图解-例求f(4)</p><img src="/2022/10/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/递归算法/image-20221108143333595.png" alt="image-20221108143333595"><h5 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h5><p>斐波那契数列，又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13…</p><p>在数学上，斐波那契数列以如下被以递归的方法定义：F0&#x3D;0,F1&#x3D;1,Fn&#x3D;F(n-1)+F(n-2)     (n&gt;2,n为正整数)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="杨辉三角的取值"><a href="#杨辉三角的取值" class="headerlink" title="杨辉三角的取值"></a>杨辉三角的取值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y &lt;= x &amp;&amp; y &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y == <span class="number">0</span> || x == y)<span class="comment">//递归终止条件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> getValue(x-<span class="number">1</span> , y-<span class="number">1</span>) + getValue(x-<span class="number">1</span> , y);<span class="comment">//缩小问题规模，依次不断递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用递归算法解决问题"><a href="#应用递归算法解决问题" class="headerlink" title="应用递归算法解决问题"></a>应用递归算法解决问题</h4><ul><li>Hanoi塔</li></ul><h4 id="数据结构中的递归定义"><a href="#数据结构中的递归定义" class="headerlink" title="数据结构中的递归定义"></a>数据结构中的递归定义</h4><ul><li>树</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/10/26/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/26/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2022/10/26/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/26/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h3 id="BF算法-不提倡"><a href="#BF算法-不提倡" class="headerlink" title="BF算法(不提倡)"></a>BF算法(不提倡)</h3><p>如果用暴力匹配的思路，并假设现在 str1 匹配到 i 位置，子串 str2 匹配到 j 位置，则有:</p><ol><li>如果当前字符匹配成功(即str1[i]&#x3D;&#x3D;str2[j])，则i++，j++，继续匹配下一个字符</li><li>如果失配(即str1[i]!&#x3D;str2[j])，令i&#x3D;i-(j-1)，j&#x3D;0。相当于每次匹配失败时，i回溯，j被置为0。</li><li><strong>用暴力方法解决的话就会有大量的回溯，每次只移动一位，若是不匹配，移动到下一位接着判断，浪费了大量</strong><br><strong>的时间。(不可行!)</strong></li><li>暴力匹配算法实现.</li><li>代码</li></ol><p><strong>BF算法会浪费大量时间，低效</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViolenceMatch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷你尚硅你~&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> violenceMatch(str1, str2);</span><br><span class="line">        System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">violenceMatch</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s1 = str1.toCharArray();<span class="comment">//将字符出遍历数组</span></span><br><span class="line">        <span class="type">char</span>[] s2 = str2.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">s1Len</span> <span class="operator">=</span> s1.length;<span class="comment">//数组的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s2Len</span> <span class="operator">=</span> s2.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// i索引指向s1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// j索引指向s2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;<span class="comment">// 保证匹配时，不越界</span></span><br><span class="line">            <span class="keyword">if</span> (s1[i] == s2[j]) &#123;<span class="comment">//匹配 ok</span></span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//没有匹配成功</span></span><br><span class="line">                <span class="comment">//如果失配(即 str1[i]! = str2[j])，令 i = i - (j - 1)，j = 0。</span></span><br><span class="line">                i = i - (j - <span class="number">1</span>);</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (j == s2Len) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的i &#x3D; i - ( j + 1 ) :                0    1    2     3    4    5    6    7    8     9   10  11  12 13<br>首先假设两行字符串： str1:   a    b    c     d    e     f     g    h     i     j     k    l    m    n<br>                                       str2:    A    B    C    D    E    F    G    H    I     J     K    L   M    N</p><p>假设str1索引第一个指向a,那么从str2第一个数值开始，即A开始比对，每次只移动一位逐一比对</p><p>假设前面均比对成功，当str1索引指向e时，str2对应的E没有匹配成功，那么str2索引回到第一位重新配对，而这时因为时str2索引先动匹配，所以str1索引位置时( j - 1 )个长度，即为 i - ( j - 1 )</p><h3 id="KMP算法介绍"><a href="#KMP算法介绍" class="headerlink" title="KMP算法介绍"></a>KMP算法介绍</h3><p>Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP 算法”，常用于在一个文本串 S 内查找一个模式串 P 的 出现位置</p><h4 id="KMP算法原理："><a href="#KMP算法原理：" class="headerlink" title="KMP算法原理："></a>KMP算法原理：</h4><p>KMP 方法算法就利用之前判断过信息，通过一个 next 数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过 next 数组找到，前面匹配过的位置，省去了大量的计算时间</p><h3 id="KMP算法最佳应用-字符串匹配问题"><a href="#KMP算法最佳应用-字符串匹配问题" class="headerlink" title="KMP算法最佳应用-字符串匹配问题"></a>KMP算法最佳应用-字符串匹配问题</h3><h4 id="字符串匹配问题："><a href="#字符串匹配问题：" class="headerlink" title="字符串匹配问题："></a>字符串匹配问题：</h4><ol><li>有一个字符串str1&#x3D;“BBCABCDABABCDABCDABDE”，和一个子串str2&#x3D;“ABCDABD”</li><li>现在要判断 str1 是否含有 str2, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</li><li>要求:使用KMP算法完成判断，不能使用简单的暴力匹配算法.</li></ol><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>现在有两串字符串:str1&#x3D;“BBCABCDABABCDABCDABDE”<br>                                str2&#x3D;“ABCDABD”</p><p>现在开始匹配str2，首先A 与str1中第一个字符B不相等，str1索引指向第二位，依旧不相等，继续后移直到索引指向A,开始匹配str2第二个字符，而刚刚str1索引指向的A的下一位恰好也和B相等，继续匹配，在匹配失败时，str1第一次的索引要后移（已经完成配对的个数 - 部分匹配值)(部分匹配值在后面有解释)个，这里因为是连续配对，所以前面的就不存在还可行的情况，索引移到新的位置开始配对</p><h3 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h3><p>1.首先，用 Str1 的第一个字符和 Str2 的第一个字符去比较，不符合，关键词向后移动一位</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155119643.png" alt="image-20221027155119643"></p><ol start="2"><li>重复第一步，还是不符合，再后移</li></ol><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155131273.png" alt="image-20221027155131273"></p><ol start="3"><li>一直重复，直到Str1有一个字符与Str2的第一个字符符合为止</li></ol><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155214400.png" alt="image-20221027155214400"></p><ol start="4"><li>接着比较字符串和搜索词的下一个字符，还是符合。</li></ol><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155228279.png" alt="image-20221027155228279"></p><p>5.遇到 Str1 有一个字符与 Str2 对应的字符不符合。</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155238116.png" alt="image-20221027155238116"></p><p>6.这时候，想到的是继续遍历 Str1 的下一个字符，重复第 1 步。(其实是很不明智的，因为此时 BCD 已经比较过了， 没有必要再做重复的工作，一个基本事实是，当空格与 D 不匹配时，你其实知道前面六个字符是”ABCDAB”。 KMP 算法的想法是，<strong>设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移</strong>，这样就提高了效率。)</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155746561.png" alt="image-20221027155746561"></p><p>7.对照表  str2索引移动的长度减去最后一位对应出现的次数</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027155942911.png" alt="image-20221027155942911"></p><p>8.已知空格与 D 不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符 B 对应的”部分 匹配值”为 2，因此按照下面的公式算出向后移动的位数:<br><strong>移动位数 &#x3D; 已匹配的字符数 - 对应的部分匹配值</strong>因为 6 - 2 等于 4，所以将搜索词向后移动 4 位。</p><p>也就是str2索引移动的长度  -  对应部分匹配值</p><p>9.因为空格与C不匹配，搜索词还要继续往后移。这时，已匹配的字符数为 2(”AB”)，对应的”部分匹配值” 为 0。所以，移动位数 &#x3D; 2 - 0，结果为 2，于是将搜索词向后移 2 位。</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027160057459.png" alt="image-20221027160057459"></p><p>10.因为空格与 A 不匹配，继续后移一位。</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027160114963.png" alt="image-20221027160114963"></p><p>11.逐位比较，直到发现 C 与 D 不匹配。于是，移动位数 &#x3D; 6 - 2，继续将搜索词向后移动 4 位。</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027160127685.png" alt="image-20221027160127685"></p><p>12.逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索(即找出全部匹配)， 移动位数 &#x3D; 7 - 0，再将搜索词向后移动 7 位，这里就不再重复了。</p><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027160552443.png" alt="image-20221027160552443"></p><h3 id="部分匹配表"><a href="#部分匹配表" class="headerlink" title="部分匹配表"></a>部分匹配表</h3><h4 id="前缀，后缀"><a href="#前缀，后缀" class="headerlink" title="前缀，后缀"></a>前缀，后缀</h4><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221027160805559.png" alt="image-20221027160805559"></p><h4 id="部分匹配值"><a href="#部分匹配值" class="headerlink" title="部分匹配值"></a>部分匹配值</h4><p>部分匹配值就是前缀和后缀最长的共有元素的长度</p><p><strong>以”ABCDABD”为例</strong>， </p><p>-”A”的前缀和后缀都为空集，共有元素的长度为 0; -”AB”的前缀为[A]，后缀为[B]，共有元素的长度为 0;<br>-”ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度 0;<br>-”ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为 0;<br>-”ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为 1; -”ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”， 长度为 2;<br>-”ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为 0。</p><h3 id="代码实现KMP算法"><a href="#代码实现KMP算法" class="headerlink" title="代码实现KMP算法"></a>代码实现KMP算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMPAlgorithm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ABCDABD&quot;</span>;</span><br><span class="line">        <span class="comment">//String str2 = &quot;BBC&quot;;</span></span><br><span class="line">        <span class="type">int</span>[] next = kmpNext(<span class="string">&quot;ABCDABD&quot;</span>); <span class="comment">//[0, 1, 2, 0]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;next=&quot;</span> + Arrays.toString(next));</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> kmpSearch(str1, str2, next);</span><br><span class="line">        System.out.println(<span class="string">&quot;index=&quot;</span> + index); <span class="comment">// 15 了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 源字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 子串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next 部分匹配表, 是子串对应的部分匹配表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果是-1 就是没有匹配到，否则返回第一个匹配的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kmpSearch</span><span class="params">(String str1, String str2, <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; str1.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//需要处理 str1.charAt(i) != str2.charAt(j), 去调整 j 的大小</span></span><br><span class="line">            <span class="comment">//KMP 算法核心点, 可以验证...</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == str2.length()) &#123;<span class="comment">//找到了 // j = 3 i</span></span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到一个字符串(子串) 的部分匹配值表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] kmpNext(String dest) &#123;</span><br><span class="line">        <span class="comment">//创建一个 next 数组保存部分匹配值</span></span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[dest.length()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//如果字符串是长度为 1 部分匹配值就是 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt; dest.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//当 dest.charAt(i) != dest.charAt(j) ，我们需要从 next[j-1]获取新的 j</span></span><br><span class="line">            <span class="comment">//直到我们发现 有 dest.charAt(i) == dest.charAt(j)成立才退出</span></span><br><span class="line">            <span class="comment">//这时 kmp 算法的核心点</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当 dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1</span></span><br><span class="line">            <span class="keyword">if</span>(dest.charAt(i) == dest.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT[]"></a>NEXT[]</h3><p>next数组：</p><p>**next[i]**（i从1开始算）代表着，除去第i个数，在一个字符串里面从第一个数到第（i-1）字符串前缀与后缀最长重复的个数。</p><h3 id="KMP核心代码-j-x3D-next-j-1"><a href="#KMP核心代码-j-x3D-next-j-1" class="headerlink" title="KMP核心代码 j &#x3D; next[j-1]"></a>KMP核心代码 j &#x3D; next[j-1]</h3><p><img src="/2022/10/26/KMP%E7%AE%97%E6%B3%95/image-20221029133533330.png" alt="image-20221029133533330"></p><p>当i&#x3D;8时，此时j&#x3D;3,发现dest.charAt(i) !&#x3D; dest.charAt(j)，j向前移一位，上图我们已经将j向前移了一位,即j&#x3D;2，（根据结论逆推）此时比较2与8，但前提确保2前面的字符 （0-1）是否是与8前面的字符（6-7）相等， 此时 next[2]&#x3D;2，表示黄色部分前两个字符与后两个字符相等（0-1与1-2相等），而在上次遍历（i&#x3D;7）时我们已经确认蓝色部分与黄色部分匹配（j&#x3D;3），故1-2与6-7相等，所以0-1与6-7相等，此时我们只需比较2与8是否相等就可以求出最大公共前后缀了。</p><p> j&#x3D;next[j-1]代表j从0开始移动next[j-1]下，此时j前面的字符（0-1）已经与i前面的字符（6-7）相等了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java003</title>
      <link href="/2022/10/26/java003/"/>
      <url>/2022/10/26/java003/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h3 id="循环高级"><a href="#循环高级" class="headerlink" title="循环高级"></a>循环高级</h3><h4 id="逢七过"><a href="#逢七过" class="headerlink" title="逢七过"></a>逢七过</h4><p>需求：</p><p> 朋友聚会的时候可能会玩一个游戏：逢7过</p><p> 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</p><p> 使用程序在控制台打印出1-100之间的满足逢七必过规则的数据</p><p>举例：</p><p> 1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 …</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*朋友聚会的时候可能会玩一个游戏：逢7过</span></span><br><span class="line"><span class="comment">        游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</span></span><br><span class="line"><span class="comment">        需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/</span></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//个位7  十位7   7倍数</span></span><br><span class="line"><span class="comment">//1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过....</span></span><br><span class="line"><span class="comment">//69 过 过 过 过 过 过... 80</span></span><br><span class="line"><span class="comment">//1.得到1~100之间的每一个数字</span></span><br><span class="line"><span class="comment">//开始：1</span></span><br><span class="line"><span class="comment">//结束：100</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">7</span> || i / <span class="number">10</span> % <span class="number">10</span> == <span class="number">7</span>  ||  i % <span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="平方根"><a href="#平方根" class="headerlink" title="平方根"></a>平方根</h4><p>需求：</p><p> 键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。</p><p>需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。<br>        结果只保留整数部分 ，小数部分将被舍去 。</p><p>分析：<br>平方根   16的平方根4<br>         4的平方根2</p><p> 10<br> 1 * 1 &#x3D; 1 &lt; 10<br> 2 * 2 &#x3D; 4 &lt; 10<br> 3 * 3 &#x3D; 9 &lt; 10<br> 4 * 4 &#x3D; 16 &gt; 10<br>推断：10的平方根是在3~4之间。</p><p> 20<br> 1 * 1 &#x3D; 1 &lt; 20<br> 2 * 2 &#x3D; 4 &lt; 20<br> 3 * 3 &#x3D; 9 &lt; 20<br> 4 * 4 &#x3D; 16 &lt; 20<br> 5 * 5 &#x3D; 25 &gt; 20<br>推断：20的平方根是在4~5之间。</p><p>在代码当中<br>从1开始循环，拿着数字的平方跟原来的数字进行比较<br>如果小于的，那么继续往后判断<br>如果相等，那么当前数字就是平方根<br>如果大于的，那么前一个数字就是平方跟的整数部分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入一个整数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.从1开始循环判断</span></span><br><span class="line"><span class="comment">//开始：1 结束: number</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= number; i++) &#123;</span><br><span class="line">    <span class="comment">//用i * i 再跟number进行比较</span></span><br><span class="line">    <span class="keyword">if</span>(i * i == number)&#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;的平方根&quot;</span>);</span><br><span class="line">        <span class="comment">//一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i * i &gt; number)&#123;</span><br><span class="line">        System.out.println((i - <span class="number">1</span>) + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;平方根的整数部分&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果刚好i的平方与number相等，则i为number的平方根；如果恰好number比i的平方要大，那么i平方是第一个比number大的数，所以i-1是number平方根的整数部分</span></span><br></pre></td></tr></table></figure><h4 id="判断是否为质数"><a href="#判断是否为质数" class="headerlink" title="判断是否为质数"></a>判断是否为质数</h4><p>需求：</p><p> 键盘录入一个正整数 x ，判断该整数是否为一个质数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//质数：</span></span><br><span class="line"><span class="comment">//如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数</span></span><br><span class="line"><span class="comment">//7 = 1 * 7 质数</span></span><br><span class="line"><span class="comment">//8 = 1 * 8  2 * 4 合数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入一个正整数</span></span><br><span class="line"><span class="comment">//number</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个正整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量，表示标记</span></span><br><span class="line"><span class="comment">//标记着number是否为一个质数</span></span><br><span class="line"><span class="comment">//true： 是一个质数</span></span><br><span class="line"><span class="comment">//false : 不是一个质数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示最初就认为number是一个质数</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断</span></span><br><span class="line"><span class="comment">//写一个循环，从2开始判断，一直判断到number-1为止</span></span><br><span class="line"><span class="comment">//看这个范围之内，有没有数字可以被number整除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示这个范围之内的每一个数字</span></span><br><span class="line">    <span class="comment">//看number是否能被i整除就可以了</span></span><br><span class="line">    <span class="keyword">if</span>(number % i == <span class="number">0</span>)&#123;<span class="comment">// 9 % 2 = 1</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//System.out.println(number + &quot;不是一个质数&quot;);</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">/*else&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(number + &quot;是一个质数&quot;);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了</span></span><br><span class="line"><span class="comment">//此时才能断定number是一个质数</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    System.out.println(number + <span class="string">&quot;是一个质数&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(number + <span class="string">&quot;不是一个质数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h4><p>需求：</p><p> 程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</p><p>要求：</p><p> 使用循环猜，一直猜中为止。</p><p>思路分析：</p><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.生成一个1-100之间的随机数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 0 ~ 99 + 1 --- 1 ~ 100</span></span><br><span class="line">System.out.println(number);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用键盘录入去猜出这个数字是多少？</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">guessNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">//3.比较</span></span><br><span class="line">    <span class="keyword">if</span>(guessNumber &gt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字大了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字小了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，猜中了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;<span class="number">0</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java002</title>
      <link href="/2022/10/26/java002/"/>
      <url>/2022/10/26/java002/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h5 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h5><p>顺序结构</p><p>判断和选择结构(if , switch)</p><p>循环结构(for , while , do…while)</p><h5 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h5><p><img src="https://thumbnail1.baidupcs.com/thumbnail/fe3e12568u7de2fad4539c0c3e2d35e6?fid=1103005553467-250528-77055408700127&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-RmJU/GbJVaA2Q50zAKtAGGonjlY=&expires=8h&chkbd=0&chkv=0&dp-logid=5008051728761383&dp-callid=0&time=1666753200&size=c1707_u960&quality=90&vuk=1103005553467&ft=image&autopolicy=1" alt="img"></p><hr><h3 id="判断语句-if语句"><a href="#判断语句-if语句" class="headerlink" title="判断语句: if语句"></a>判断语句: if语句</h3><h4 id="if语句格式-1："><a href="#if语句格式-1：" class="headerlink" title="if语句格式 1："></a>if语句格式 1：</h4><p>格式：<br>if (关系表达式) {<br>    语句体;<br>}</p><p><strong>执行流程：</strong></p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><img src="https://thumbnail1.baidupcs.com/thumbnail/804683b13qeabdc789b82b6d7593bd97?fid=1103005553467-250528-808889076163316&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-C1OKyswwEunVFhX3q54uD%2bktu1g%3d&expires=8h&chkbd=0&chkv=0&dp-logid=5124272328361749&dp-callid=0&time=1666753200&size=c1707_u960&quality=90&vuk=1103005553467&ft=image&autopolicy=1" alt="img" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span></span><br><span class="line"><span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a == c) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a等于c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><p><strong>练习1：老丈人选女婿</strong></p><p>需求：</p><p> 键盘录入女婿的酒量，如果大于2斤，老丈人给出回应，否则没有任何回应</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入女婿的酒量</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入女婿的酒量&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">wine</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.对酒量进行一个判断即可</span></span><br><span class="line"><span class="keyword">if</span>(wine &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不错哟，小伙子&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：考试奖励</strong></p><p>需求：</p><p> 键盘录入一个整数，表示小明的考试名次，如果名次为1，小红可以当小明的女朋友捏。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入一个整数，表示小明的考试名次</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入小明的名次&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">rank</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.对小明的考试成绩进行判断即可</span></span><br><span class="line"><span class="keyword">if</span>(rank == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;小红成为了小明的女朋友&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if语句格式-2："><a href="#if语句格式-2：" class="headerlink" title="if语句格式 2："></a>if语句格式 2：</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="https://thumbnail1.baidupcs.com/thumbnail/804683b13qeabdc789b82b6d7593bd97?fid=1103005553467-250528-808889076163316&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-rLftAHtLe+2PfqOV3NhQ9Tprl10=&expires=8h&chkbd=0&chkv=0&dp-logid=12650489569965617&dp-callid=0&time=1666782000&size=c1707_u960&quality=90&vuk=1103005553467&ft=image&autopolicy=1" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span></span><br><span class="line"><span class="keyword">if</span>(a &amp;gt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a的值大于b&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h5><p><strong>练习1：吃饭</strong></p><p>需求：</p><p> 键盘录入一个整数，表示身上的钱。</p><p> 如果大于等于100块，就是网红餐厅。</p><p> 否则，就吃经济实惠的沙县小吃。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入一个整数。表示身上的钱。</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数表示身上的钱&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.对钱进行判断</span></span><br><span class="line"><span class="keyword">if</span>(money &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;吃网红餐厅&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;沙县小吃&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：影院选座</strong></p><p>需求：</p><p> 在实际开发中，电影院选座也会使用到if判断。</p><p> 假设某影院售卖了100张票，票的序号为1~100。</p><p> 其中奇数票号坐左侧，偶数票号坐右侧。</p><p> 键盘录入一个整数表示电影票的票号。</p><p> 根据不同情况，给出不同的提示：</p><p> 如果票号为奇数，那么打印坐左边。</p><p> 如果票号为偶数，那么打印坐右边。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入票号</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入票号&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="keyword">if</span>(ticket &gt;= <span class="number">1</span> &amp;&amp; ticket &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">//合法</span></span><br><span class="line">    <span class="comment">//2.对票号进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (ticket % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//偶数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;坐右边&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;坐左边&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//票号不合法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;票号不合法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if语句格式-3"><a href="#if语句格式-3" class="headerlink" title="if语句格式 3:"></a>if语句格式 3:</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><img src="https://thumbnail0.baidupcs.com/thumbnail/48bf5f736ic5c61ef9f54815fbd8635f?fid=1103005553467-250528-948121161798466&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-qp6Ni9%2fx%2bp2ReCV7%2fNVR0bolUvA%3d&expires=8h&chkbd=0&chkv=0&dp-logid=7178055935343333&dp-callid=0&time=1666760400&size=c1999_u1999&quality=100&vuk=1103005553467&ft=image" alt="img" style="zoom:67%;"><h5 id="练习：-2"><a href="#练习：-2" class="headerlink" title="练习："></a>练习：</h5><p><strong>练习1：考试奖励</strong></p><p>需求：</p><p> 小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，</p><p>假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p><p>分析：</p><p> ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p><p> ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p><p> ③为每种判断设置对应的条件</p><p> ④为每种判断设置对应的奖励</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//95~100 自行车一辆</span></span><br><span class="line"><span class="comment">//90~94   游乐场玩一天</span></span><br><span class="line"><span class="comment">//80 ~ 89 变形金刚一个</span></span><br><span class="line"><span class="comment">//80 以下  胖揍一顿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.键盘录入一个值表示小明的分数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入小明的成绩&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.对分数的有效性进行判断</span></span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">//有效的分数</span></span><br><span class="line">    <span class="comment">//3.对小明的分数进行判断，不同情况执行不同的代码</span></span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;送自行车一辆&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">94</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游乐场玩一天&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变形金刚一个&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;胖揍一顿&quot;</span>);<span class="comment">//范围内剩下分数都运行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//无效的分数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;分数不合法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a><strong>格式：</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行流程："><a href="#执行流程：" class="headerlink" title="执行流程："></a>执行流程：</h4><ul><li><p>首先计算出表达式的值</p></li><li><p>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。</p></li><li><p>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</p><p>逐个筛选，若有对应值就运行对应的语句，都没有的话执行default语句体</p></li></ul><h4 id="练习：-3"><a href="#练习：-3" class="headerlink" title="练习："></a>练习：</h4><p><strong>运动计划：</strong></p><p>需求：键盘录入星期数，显示今天的减肥活动。</p><p>周一：跑步</p><p>周二：游泳</p><p>周三：慢走</p><p>周四：动感单车</p><p>周五：拳击</p><p>周六：爬山</p><p>周日：好好吃一顿</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.键盘录入一个整数表示星期</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数表示星期&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.书写一个switch语句去跟week进行匹配</span></span><br><span class="line">    <span class="keyword">switch</span> (week)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误，没有这个星期&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拓展知识："><a href="#拓展知识：" class="headerlink" title="拓展知识："></a>拓展知识：</h4><p>default可以放在任何位置，也可以省略；<br>在case完成后要加上break ，不然会引发case穿透现象(不会在运行完当前case语句停止，一直向下运行直到遇到break或者结束)</p><h4 id="练习：-4"><a href="#练习：-4" class="headerlink" title="练习："></a>练习：</h4><p><strong>休息日和工作日</strong></p><p>需求：键盘录入星期数，输出工作日、休息日。</p><p>(1-5) 工作日，(6-7)休息日。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入星期数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入星期&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2.利用switch进行匹配</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="comment">//利用case穿透简化代码(没有break会一直运行直到遇到break或者结束)</span></span><br><span class="line"><span class="keyword">switch</span> (week)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="comment">//利用JDK12简化代码书写</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for循环结构："><a href="#for循环结构：" class="headerlink" title="for循环结构："></a>for循环结构：</h4><h5 id="for循环格式："><a href="#for循环格式：" class="headerlink" title="for循环格式："></a>for循环格式：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行流程：-1"><a href="#执行流程：-1" class="headerlink" title="执行流程："></a><strong>执行流程：</strong></h5><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p> 如果是false，循环结束</p><p> 如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.确定循环的开始条件</span></span><br><span class="line"><span class="comment">//2.确定循环的结束条件</span></span><br><span class="line"><span class="comment">//3.确定要重复执行的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：打印5次HelloWorld</span></span><br><span class="line"><span class="comment">//开始条件：1</span></span><br><span class="line"><span class="comment">//结束条件：5</span></span><br><span class="line"><span class="comment">//重复代码：打印语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &amp;lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(&amp;quot;HelloWorld&amp;quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环练习："><a href="#for循环练习：" class="headerlink" title="for循环练习："></a>for循环练习：</h4><h5 id="输出数据："><a href="#输出数据：" class="headerlink" title="输出数据："></a>输出数据：</h5><ul><li>需求：在控制台输出1-5和5-1的数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//需求：输出数据1-5</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&gt;;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&amp;quot;--------&amp;quot;);</span><br><span class="line"><span class="comment">//需求：输出数据5-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">5</span>; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="求和："><a href="#求和：" class="headerlink" title="求和："></a>求和：</h5><ul><li>需求：求1-5之间的数据和，并把求和结果在控制台输出</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从1开始到5结束的数据，使用循环结构完成</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&gt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="comment">//将反复进行的事情写入循环结构内部</span></span><br><span class="line">             <span class="comment">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span></span><br><span class="line">sum = sum + i;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum += i;sum = sum + i;</span></span><br><span class="line"><span class="comment">第一次：sum = sum + i = 0 + 1 = 1;</span></span><br><span class="line"><span class="comment">第二次：sum = sum + i = 1 + 2 = 3;</span></span><br><span class="line"><span class="comment">第三次：sum = sum + i = 3 + 3 = 6;</span></span><br><span class="line"><span class="comment">第四次：sum = sum + i = 6 + 4 = 10;</span></span><br><span class="line"><span class="comment">第五次：sum = sum + i = 10 + 5 = 15;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环执行完毕时，将最终数据打印出来</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-5之间的数据和是:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="求偶数和："><a href="#求偶数和：" class="headerlink" title="求偶数和："></a>求偶数和：</h5><ul><li>需求：求1-100之间的偶数和，并把求和结果在控制台输出</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&gt;;=<span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//sum += i；</span></span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环执行完毕时，将最终数据打印出来</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-100之间的偶数和是&quot;</span>： + sum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="统计次数："><a href="#统计次数：" class="headerlink" title="统计次数："></a>统计次数：</h5><p>需求：</p><p> 键盘录入两个数字，表示一个范围。</p><p> 统计这个范围中。</p><p> 既能被3整除，又能被5整除数字有多少个？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入数字&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a;c &lt;= b;c++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (c%<span class="number">3</span> == <span class="number">0</span> &amp;&amp; c % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sum = sum + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;范围内既能被3整除，又能被5整除数字有&quot;</span>+sum+<span class="string">&quot;个&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><h5 id="while循环格式："><a href="#while循环格式：" class="headerlink" title="while循环格式："></a>while循环格式：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环练习："><a href="#while循环练习：" class="headerlink" title="while循环练习："></a>while循环练习：</h4><p><strong>打印5次HelloWorld:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p><strong>珠穆朗玛峰:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义一个变量表示珠穆朗玛峰的高度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">8844430</span>;</span><br><span class="line"><span class="comment">//2.定义一个变量表示纸张的厚度</span></span><br><span class="line"><span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个计数器（变量），用来统计折叠的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.循环折叠纸张</span></span><br><span class="line"><span class="comment">//只有纸张的厚度 &lt; 穆朗玛峰的高度 循环才继续，否则循环就停止</span></span><br><span class="line"><span class="comment">//坑：只有判断为真，循环才会继续</span></span><br><span class="line"><span class="keyword">while</span>(paper &lt; height)&#123;</span><br><span class="line">    <span class="comment">//折叠纸张</span></span><br><span class="line">    paper = paper * <span class="number">2</span>;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.打印一下纸张的厚度</span></span><br><span class="line">System.out.println(count);<span class="comment">//27</span></span><br></pre></td></tr></table></figure><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><h5 id="do…while循环格式："><a href="#do…while循环格式：" class="headerlink" title="do…while循环格式："></a>do…while循环格式：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><p>执行流程:<br>①执行初始化语句<br>②执行循环体语句<br>③执行条件控制语句<br>④执行条件判断语句，看其结果是true还是false如果是false，循环结束<br>如果是true，继续执行<br>⑤回到②继续</p><p><strong>特点：</strong></p><p>先运行，在判断，至少运行一次</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;<span class="comment">//初始化语句</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;三月15日&quot;</span>);<span class="comment">//循环体语句</span></span><br><span class="line">            i++;<span class="comment">//条件控制语句</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (i&lt;=<span class="number">5</span>);<span class="comment">//条件判断语句</span></span><br></pre></td></tr></table></figure><h4 id="三种循环格式的区别"><a href="#三种循环格式的区别" class="headerlink" title="三种循环格式的区别"></a>三种循环格式的区别</h4><p> for和while循环，是先判断，再执行。</p><p> do…while是先执行，再判断。</p><p> 当知道循环次数或者循环范围的时候，用for循环。</p><p> 当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</p><h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><p><strong>for死循环</strong>写法:<br>for ( ; ; ){<br>    }</p><p><strong>while死循环</strong>写法:<br>while(true){<br>    }</p><p><strong>do while死循环</strong>写法:<br>do {<br>    }while(true) ;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今天是星期二&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今天是星期二&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今天是星期二&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java001</title>
      <link href="/2022/10/26/java001/"/>
      <url>/2022/10/26/java001/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>Java的算术运算符有+ - * &#x2F;<br>其中+ - * 和数学中的运算一样    <strong>但是 &#x2F; 有区别</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。</span><br><span class="line"><span class="number">2.</span>小数直接参与运算，得到的结果有可能是不精确的。</span><br><span class="line">案例：</span><br><span class="line">System.out.println( <span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);<span class="comment">//3.3333333333333335</span></span><br></pre></td></tr></table></figure><p><strong>取模、取余</strong>用 <strong>%<strong>来运算  得到的结果为</strong>余数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> % <span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>);<span class="comment">//1</span></span><br><span class="line">应用场景：</span><br><span class="line"><span class="comment">//可以利用取模来判断一个数是奇数还是偶数</span></span><br><span class="line">System.out.println(<span class="number">15</span> % <span class="number">2</span>);<span class="comment">//1  奇数</span></span><br></pre></td></tr></table></figure><h4 id="数值拆分"><a href="#数值拆分" class="headerlink" title="数值拆分"></a>数值拆分</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入一个三位数</span></span><br><span class="line"><span class="comment">//导包 --- 创建对象 --- 接收数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个三位数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取这个三位数的个位、十位、百位并打印出来</span></span><br><span class="line"><span class="comment">//公式：</span></span><br><span class="line"><span class="comment">//针对于任意的一个数而言</span></span><br><span class="line"><span class="comment">//个位： 数字 % 10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ones</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//十位： 数字 / 10 % 10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tens</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//百位： 数字 / 100 % 10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hundreds</span> <span class="operator">=</span> number / <span class="number">100</span>  % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(ones);</span><br><span class="line">        System.out.println(tens);</span><br><span class="line">        System.out.println(hundreds);</span><br></pre></td></tr></table></figure><p>先录入数字，<strong>int</strong>定义每个位置的数，分别除以他的位数(个位&#x2F;1；十位&#x2F;10；百位&#x2F;100……),对10取模得到每一位数字</p><hr><h3 id="隐式转换、强制转换"><a href="#隐式转换、强制转换" class="headerlink" title="隐式转换、强制转换"></a>隐式转换、强制转换</h3><p><strong>隐式转换</strong></p><p>不同变量类型在参与运算时，会将自己的变量提升为最大的变量值</p><p>short , char , byte 在参与运算时会自动转换为int型参与计算</p><p><strong>强制转换</strong></p><p>把<strong>取值范围大的数据或者变量</strong>赋值给另一个<strong>范围较小的变量</strong>，是不被允许的<br>如果一定这么做需要加入<strong>强制转化</strong></p><p><strong>书写格式：</strong></p><p> 目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a;</span><br><span class="line">        System.out.println(b);<span class="comment">//12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制转换可能会导致数据发生错误(数据的精度丢失)</p><hr><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p><strong>分类：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">++  自增运算符</span><br><span class="line">--  自减运算符</span><br></pre></td></tr></table></figure><p>++：就是把变量里面的值+1</p><p>–：就是把变量里面的值-1</p><p><strong>注意点：</strong></p><p> 不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</p><p>在同一行，  ++i 运算先取加1后的i    i++先取i的原值，但是后面引用时i值也为原值+1</p><hr><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。</p><h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>!&#x3D;</td><td>就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;</td><td>就是判断左边是否大于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;&#x3D;</td><td>就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;</td><td>就是判断左边是否小于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;&#x3D;</td><td>就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false</td></tr></tbody></table><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><p>关系运算符最终的结果一定是布尔类型的。要么是true，要么是false</p></li><li><p>在写&#x3D;&#x3D;的时候，千万不要写成&#x3D;</p></li></ul><p><strong>&amp; 和 |的使用</strong></p><p>&amp;：逻辑与（而且）</p><p> <strong>两边都为真，结果才是真</strong>，只要有一个为假，那么结果就是假。</p><p>|：逻辑或（或者）</p><p> <strong>两边都为假，结果才是假</strong>，只要有一个为真，那么结果就是真。</p><p><strong>^ 异或</strong><br><strong>如果两边相同，结果为false，如果两边不同，结果为true</strong></p><p><strong>| 取反</strong><br>false取反就是true，true取反就是false</p><hr><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>分类： &amp;&amp; ||</p><p><strong>&amp;&amp;：</strong></p><p> 运算结果跟&amp;是一模一样的，只不过具有短路效果。</p><p><strong>||：</strong></p><p> 运算结果跟|是一模一样的。只不过具有短路效果。</p><p><strong>逻辑核心：</strong></p><p> 当左边不能确定整个表达式的结果，右边才会执行。</p><p> 当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。</p><p><strong>短路逻辑运算符可以提高程序的运行效率</strong></p><hr><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p> <strong>关系表达式 ？ 表达式1 ：表达式2</strong> ；</p><h5 id="计算规则："><a href="#计算规则：" class="headerlink" title="计算规则："></a>计算规则：</h5><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li></ul><h5 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h5><p> 三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：求两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="comment">//三元运算符的最终结果一定要被使用。</span></span><br><span class="line">        <span class="comment">//要么赋值给一个变量，要么直接输出。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>  a &gt; b ? a : b ;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        System.out.println(a &gt; b ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>小括号优先于所有</p><hr><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h5 id="练习1-两只老虎"><a href="#练习1-两只老虎" class="headerlink" title="练习1-两只老虎"></a>练习1-两只老虎</h5><p>需求：</p><p> 动物园里有两只老虎，两只老虎的体重分别为通过键盘录入获得，</p><p> 请用程序实现判断两只老虎的体重是否相同。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取两只老虎的体重</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一只老虎的体重&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">weight1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二只老虎的体重&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">weight2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用三元运算符求出最终结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> weight1 == weight2 ? <span class="string">&quot;相同&quot;</span> : <span class="string">&quot;不相同&quot;</span>;</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h5 id="练习2-求三个数的最大值"><a href="#练习2-求三个数的最大值" class="headerlink" title="练习2-求三个数的最大值"></a>练习2-求三个数的最大值</h5><p>需求：</p><p> 一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm。</p><p> 请用程序实现获取这三个和尚的最高身高。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义三个变量记录和尚的身高</span></span><br><span class="line"><span class="type">int</span> <span class="variable">height1</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height2</span> <span class="operator">=</span> <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height3</span> <span class="operator">=</span> <span class="number">165</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用三元运算符求出两个数中的较大值。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> height1 &gt; height2 ? height1 : height2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.求出最终的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> temp &gt; height3 ? temp : height3;</span><br><span class="line"></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/23/js001/"/>
      <url>/2022/10/23/js001/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript基础"><a href="#javascript基础" class="headerlink" title="javascript基础"></a>javascript基础</h1><h3 id="输入输出语法"><a href="#输入输出语法" class="headerlink" title="输入输出语法"></a>输入输出语法</h3><p>两种输出方式：</p><ol><li><strong>网页内容输出</strong></li><li><strong>控制台输出</strong></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个输入框</span></span><br><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line"><span class="comment">// alert 弹出警示框 输出的 展示给用户的</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;计算的结果是&#x27;</span>);</span><br><span class="line"><span class="comment">// console 控制台输出 给程序员测试用的  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是程序员能看到的&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>alert</strong>：弹出警示框</p><p>输入：<strong>prompt</strong>(“输入内容”)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入姓名：&#x27;</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(uname)</span><br></pre></td></tr></table></figure><p>这里先赋值uname为输入(prompt内容)<br>页面输出内容</p><hr><h3 id="数组、字符串拼接"><a href="#数组、字符串拼接" class="headerlink" title="数组、字符串拼接"></a>数组、字符串拼接</h3><p>数组 arr[n]   :   有n个元素的数组，第一个为第0个开始计数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;貂蝉&#x27;</span>]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">        <span class="comment">// 取值  数组名[索引]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>])</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>arr[0]  为第一个元素，马超<br>arr[4]  为第五个元素，貂蝉</p><p>字符串拼接：’字符串’ + ‘拼接’<br>输出结果为  ‘字符串拼接’</p><hr><h3 id="数字型、isNaN"><a href="#数字型、isNaN" class="headerlink" title="数字型、isNaN"></a>数字型、isNaN</h3><p>八进制  0 ~ 7  我们程序里面数字前面加0 表示八进制<br>十六进制  0 ~ 9  a ~ f   #ffffff  数字的前面加 0x 表示十六进制  10<br>数字型的最大值：<em>Number</em>.MAX_VALUE</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// num 数字型 </span></span><br><span class="line">        <span class="keyword">var</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span> <span class="comment">// PI 数字型</span></span><br><span class="line">            <span class="comment">// 1. 八进制  0 ~ 7  我们程序里面数字前面加0 表示八进制</span></span><br><span class="line">        <span class="keyword">var</span> num1 = <span class="number">010</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">//  010  八进制 转换为 10进制 就是  8 </span></span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">012</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br><span class="line">        <span class="comment">// 2. 十六进制  0 ~ 9  a ~ f    #ffffff  数字的前面加 0x 表示十六进制   10</span></span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="number">0x9</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num3);    <span class="comment">//9</span></span><br><span class="line">        <span class="keyword">var</span> num4 = <span class="number">0xa</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num4);    <span class="comment">//10</span></span><br><span class="line">        <span class="comment">// 3. 数字型的最大值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line">        <span class="comment">// 4. 数字型的最小值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br><span class="line">        <span class="comment">// 5. 无穷大</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>); <span class="comment">// Infinity 无穷大  </span></span><br><span class="line">        <span class="comment">// 6. 无穷小</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>); <span class="comment">// -Infinity 无穷大</span></span><br><span class="line">        <span class="comment">// 7. 非数字</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">100</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><strong>NaN 是 Not a Number(不是一个数值</strong></p><p><strong>isNaN( )</strong>:<br>这个方法用来判断非数字<br>并且返回一个值   如果是数字返回的是 false    如果不是数字返回的是true</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">12</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="布尔型boolean"><a href="#布尔型boolean" class="headerlink" title="布尔型boolean"></a>布尔型boolean</h3><p><strong>true</strong>参与加减法运算当<strong>1</strong>来看；<br><strong>false</strong>参与加减法运算当<strong>0</strong>来看</p><p>如果一个变量<strong>没有赋值</strong>，那么输出结果就是  <strong>underfind</strong>未定义数据类型</p><p><strong>undefined</strong> 和数字相加 最后的结果是 <strong>NaN</strong></p><p><strong>null</strong>空值在<strong>字符串运算</strong>中<strong>直接运算</strong>，在<strong>数字运算</strong>中<strong>当作0空值运算</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">// flag 布尔型 </span></span><br><span class="line">        <span class="keyword">var</span> flag1 = <span class="literal">false</span>; <span class="comment">// flag1 布尔型</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(flag + <span class="number">1</span>); <span class="comment">// true 参与加法运算当1来看</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(flag1 + <span class="number">1</span>); <span class="comment">// false 参与加法运算当 0来看</span></span><br><span class="line">        <span class="comment">// 如果一个变量声明未赋值 就是 undefined 未定义数据类型</span></span><br><span class="line">        <span class="keyword">var</span> str;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        <span class="keyword">var</span> variable = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="string">&#x27;pink&#x27;</span>); <span class="comment">// undefinedpink</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="number">1</span>); <span class="comment">// NaN  undefined 和数字相加 最后的结果是 NaN</span></span><br><span class="line">        <span class="comment">// null 空值</span></span><br><span class="line">        <span class="keyword">var</span> space = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(space + <span class="string">&#x27;pink&#x27;</span>); <span class="comment">// nullpink</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(space + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><h3 id="获取变量数据类型、字面量"><a href="#获取变量数据类型、字面量" class="headerlink" title="获取变量数据类型、字面量"></a>获取变量数据类型、字面量</h3><p><strong>typeof</strong>  +  变量名   ：   数据类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag); <span class="comment">// boolean</span></span><br><span class="line">        <span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> vari); <span class="comment">// undefined</span></span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">// object</span></span><br><span class="line">        <span class="comment">// prompt 取过来的值是 字符型的</span></span><br><span class="line">        <span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你的年龄是&#x27;</span>+age+<span class="string">&#x27;岁&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure><p>console.log(18)       <strong>18   数字型    蓝色</strong><br>console.log(‘18’)     <strong>‘18’ 字符串型   黑色</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span>);<span class="comment">//数字型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;18&#x27;</span>);<span class="comment">//字符串型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>);<span class="comment">//布尔型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><img src="/2022/10/23/js001/字面量截图.png" alt="字面量截图" style="zoom:25%;"><hr><h3 id="转换为字符型、数字型、布尔型"><a href="#转换为字符型、数字型、布尔型" class="headerlink" title="转换为字符型、数字型、布尔型"></a>转换为字符型、数字型、布尔型</h3><p><strong>转换为字符串型的三种方法：</strong></p><ol><li>把数字型转换为<strong>字符串型变量.toString()</strong>       </li><li>我们利用 <strong>String(变量)</strong>    </li><li>利用 <strong>+ 拼接字符串</strong>的方法实现转换效果 隐式转换</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 把数字型转换为字符串型 变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">// 2. 我们利用 String(变量)   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(num));</span><br><span class="line"><span class="comment">// 3. 利用 + 拼接字符串的方法实现转换效果 隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><p>如果没有转换，输出的就是数字型，控制台是蓝色；<br>字符型输出为黑色</p><p><strong>转换数字型的方法：</strong></p><p>​    <strong>parse</strong>  +  <strong>数字类型</strong>  转化为对应数字类型</p><ol><li><strong>parseInt(变量)</strong>  可以把 字符型的转换为数字型 得到是整数</li><li><strong>parseFloat(变量)</strong> 可以把 字符型的转换为数字型 得到是小数 浮点数</li><li>利用 <strong>Number(变量)</strong>     和String(变量)一样   转换为数字型</li><li>利用了算数运算 <strong>-  *  &#x2F;</strong>  隐式转换</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(age)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3 取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.94&#x27;</span>)); <span class="comment">// 3 取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">// 120 会去到这个px单位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3.14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">// 120 会去掉这个px单位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str)); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;12&#x27;</span>)); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span> - <span class="number">0</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> - <span class="string">&#x27;120&#x27;</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> * <span class="number">1</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p><strong>转换为布尔型：</strong><br>    <strong><em>Boolean</em>(变量)</strong>     转换为布尔型  输出值为false&#x2F;true</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------------&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;你好吗&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;我很好&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
